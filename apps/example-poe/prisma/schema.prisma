// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  module        Int       @default(1)
  chapter       Int       @default(1)
  section       Int       @default(1)

  classId String? @map("class_id")

  accounts  Account[]
  sessions  Session[]
  summaries Summary[]
  notes     Note[]
  FocusTime FocusTime[]

  @@index([classId])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Teacher {
  id         String  @id
  isApproved Boolean @default(false)
  classId    String  @map("class_id")

  @@map("teachers")
}

model Summary {
  id   String @id @default(uuid())
  user User   @relation(fields: [userId], references: [id])

  userId           String      @map("user_id")
  classId          String?     @map("class_id")
  module           Int
  chapter          Int
  section          Int
  isPassed         Boolean
  containmentScore Float       @map("containment_score")
  similarityScore  Float       @map("similarity_score")
  wordingScore     Float?      @map("wording_score")
  contentScore     Float?      @map("content_score")
  text             String
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt
  FocusTime        FocusTime[]

  @@map("summaries")
}

model Note {
  id              String   @id @default(uuid())
  y               Float
  noteText        String?  @map("note_text")
  highlightedText String   @map("highlighted_text")
  module          Int
  chapter         Int
  section         Int
  color           String   @default("#3730a3")
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  @@map("notes")
}

model FocusTime {
  id String @id @default(uuid())

  data Json

  totalViewTime Float?

  summaryId String  @map("summary_id")
  summary   Summary @relation(fields: [summaryId], references: [id])

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  created_at DateTime @default(now())

  @@map("focus_time")
}

model Section {
  sectionId  String @id @map("section_id")
  module     Int
  chapter    Int
  section    Int
  rawText    String @map("raw_text")
  cleanText  String @map("clean_text")
  keyphrases String

  @@map("sections")
}

model SubSection {
  id         String   @id
  sectionId  String   @map("section_id")
  subsection Int
  heading    String
  raw_text   String
  clean_text String
  slug       String
  qa_output  String
  question   String
  answer     String
  keyphrases String[]

  @@map("subsections")
}
